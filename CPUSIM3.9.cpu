<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED offset CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED format CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="CPUSIM3.9.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OPCODE" type="required" numBits="16" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field5593eaeb">
	</Field>
	<Field name="ADDRESS" type="required" numBits="12" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field5b2b6196">
	</Field>
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field4c0aa7d4">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" id="module.Register255a7e0f" />
	<Register name="AR" width="12" id="module.Register6f541cfd" />
	<Register name="DR" width="16" id="module.Register6f73e750" />
	<Register name="E" width="1" id="module.Register76ded96d" />
	<Register name="FGI" width="1" id="module.Register26bbf" />
	<Register name="FGO" width="1" id="module.Register4f7e3cb6" />
	<Register name="IEN" width="1" id="module.Register3fc71b6e" />
	<Register name="INPR" width="8" id="module.Register3fd2a84a" />
	<Register name="IR" width="16" id="module.Register2c1e739c" />
	<Register name="OUTR" width="8" id="module.Register15a00467" />
	<Register name="PC" width="12" id="module.Register3f1a6e61" />
	<Register name="S" width="1" id="module.Register6047788d" />
	<Register name="TR" width="16" id="module.Register293c1fe9" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY-OUT" bit="0" register="module.Register76ded96d" halt="false" id="module.ConditionBit3caab595" />
	<ConditionBit name="HALT-BIT" bit="0" register="module.Register6047788d" halt="true" id="module.ConditionBit502fad07" />

	<!--............. rams ..........................-->
	<RAM name="RAM" length="4096" cellSize="16" id="module.RAMb77349f" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="module.Register255a7e0f" start="0" numBits="16" value="0" id="microinstruction.CpusimSet6786568" />
	<Set name="E&lt;-0" register="module.Register76ded96d" start="0" numBits="1" value="0" id="microinstruction.CpusimSet34997af4" />
	<Set name="IEN&lt;-0" register="module.Register3fc71b6e" start="0" numBits="1" value="0" id="microinstruction.CpusimSet1bc1c2e1" />
	<Set name="IEN&lt;-1" register="module.Register3fc71b6e" start="0" numBits="1" value="1" id="microinstruction.CpusimSet25f93573" />
	<Set name="S&lt;0" register="module.Register6047788d" start="0" numBits="1" value="0" id="microinstruction.CpusimSet606f5781" />

	<!--............. test ..........................-->
	<Test name="IF AC IS NEGATIVE THEN PC&lt;- PC+1" register="module.Register255a7e0f" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="microinstruction.Test1fdecfa2" />
	<Test name="IF AC IS POSITIVE THEN PC&lt;- PC+1" register="module.Register255a7e0f" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="microinstruction.Testa1dc072" />
	<Test name="IF AC=0 THEN PC&lt;- PC+1" register="module.Register255a7e0f" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="microinstruction.Test66232eef" />
	<Test name="IF AC&gt;=0 THEN SKIP" register="module.Register255a7e0f" start="0" numBits="16" comparison="GE" value="0" omission="1" id="microinstruction.Test7ceabef5" />
	<Test name="IF DR=0 THEN PC&lt;- PC+1" register="module.Register6f73e750" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="microinstruction.Test1520dd15" />
	<Test name="IF E=0 THEN PC&lt;-PC+1" register="module.Register76ded96d" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="microinstruction.Test715a8193" />
	<Test name="IF(FGI=0) THEN PC=PC+1" register="module.Register26bbf" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="microinstruction.Testef19d01" />
	<Test name="IF(FGO=0) THEN PC= PC+1" register="module.Register4f7e3cb6" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="microinstruction.Test2745973c" />

	<!--............. increment .....................-->
	<Increment name="INC AC" register="module.Register255a7e0f" delta="1" id="microinstruction.Increment341e3eb4" />
	<Increment name="INC AR" register="module.Register6f541cfd" delta="1" id="microinstruction.Increment116d77bd" />
	<Increment name="INC DR" register="module.Register6f73e750" delta="1" id="microinstruction.Increment13f6f904" />
	<Increment name="INC PC" register="module.Register3f1a6e61" delta="1" id="microinstruction.Increment18816031" />

	<!--............. shift .........................-->
	<Shift name="ASHL" type="logical" source="module.Register255a7e0f" destination="module.Register255a7e0f" direction="left" distance="1" id="microinstruction.Shift31fb1a1" />
	<Shift name="ASHR" type="logical" source="module.Register255a7e0f" destination="module.Register255a7e0f" direction="right" distance="1" id="microinstruction.Shift108cc91b" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;- AC AND DR" type="AND" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical464603da" />
	<Logical name="AC&lt;- AC NAND DR" type="NAND" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical3074ce18" />
	<Logical name="AC&lt;- AC NOR DR" type="NOR" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical31915eab" />
	<Logical name="AC&lt;- AC NOT DR" type="NOT" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical582c9bc9" />
	<Logical name="AC&lt;- AC OR DR" type="OR" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical2e821bc5" />
	<Logical name="AC&lt;- AC XOR DR" type="XOR" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical38100403" />
	<Logical name="AC&lt;AC'" type="NOT" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Logical34f61ac" />
	<Logical name="E&lt;-E'" type="NOT" source1="module.Register76ded96d" source2="module.Register76ded96d" destination="module.Register76ded96d" id="microinstruction.Logical3f8140df" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;- AC+DR" type="ADD" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" carryBit="module.ConditionBit3caab595" id="microinstruction.Arithmetic16328d9" />
	<Arithmetic name="AC&lt;- AC-DR" type="SUBTRACT" source1="module.Register255a7e0f" source2="module.Register6f73e750" destination="module.Register255a7e0f" id="microinstruction.Arithmetic39eb14ea" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC&lt;- DR" source="module.Register6f73e750" srcStartBit="0" dest="module.Register255a7e0f" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR41d1507a" />
	<TransferRtoR name="AR&lt;- IR(0-11)" source="module.Register2c1e739c" srcStartBit="4" dest="module.Register6f541cfd" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR74636727" />
	<TransferRtoR name="AR&lt;- PC" source="module.Register3f1a6e61" srcStartBit="0" dest="module.Register6f541cfd" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR6cdeac92" />
	<TransferRtoR name="PC&lt;- AR" source="module.Register6f541cfd" srcStartBit="0" dest="module.Register3f1a6e61" destStartBit="0" numBits="12" id="microinstruction.TransferRtoRdf3b9a7" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR(12-14)" ir="module.Register2c1e739c" id="microinstruction.Decode466a7ae3" />

	<!--............. set condition bit .............-->
	<SetCondBit name="S" bit="module.ConditionBit502fad07" value="1" id="microinstruction.SetCondBit295f7756" />

	<!--............. io ............................-->
	<IO name="INPUT" direction="input" type="integer" buffer="module.Register255a7e0f" connection="[console]" id="microinstruction.IO30fcf4d3" />
	<IO name="OUTPUT" direction="output" type="integer" buffer="module.Register255a7e0f" connection="[console]" id="microinstruction.IO20d24dea" />

	<!--............. memory access .................-->
	<MemoryAccess name="AC&lt;-M[AR]" direction="read" memory="module.RAMb77349f" data="module.Register255a7e0f" address="module.Register6f541cfd" id="microinstruction.MemoryAccess357a9671" />
	<MemoryAccess name="AR&lt;-M[AR]" direction="read" memory="module.RAMb77349f" data="module.Register6f541cfd" address="module.Register6f541cfd" id="microinstruction.MemoryAccess674db24f" />
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="module.RAMb77349f" data="module.Register6f73e750" address="module.Register6f541cfd" id="microinstruction.MemoryAccess30c09819" />
	<MemoryAccess name="IR&lt;-M[AR]" direction="read" memory="module.RAMb77349f" data="module.Register2c1e739c" address="module.Register6f541cfd" id="microinstruction.MemoryAccess2cf3ef6" />
	<MemoryAccess name="M[AR]&lt;-AC" direction="write" memory="module.RAMb77349f" data="module.Register255a7e0f" address="module.Register6f541cfd" id="microinstruction.MemoryAccess63e7f9c0" />
	<MemoryAccess name="M[AR]&lt;-DR" direction="write" memory="module.RAMb77349f" data="module.Register6f73e750" address="module.Register6f541cfd" id="microinstruction.MemoryAccess69b2e039" />
	<MemoryAccess name="M[AR]&lt;-PC" direction="write" memory="module.RAMb77349f" data="module.Register3f1a6e61" address="module.Register6f541cfd" id="microinstruction.MemoryAccess5d86ad46" />

	<!--............. end ...........................-->
	<End id="microinstruction.End2645008e" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoR6cdeac92" />
		<Microinstruction microRef="microinstruction.MemoryAccess2cf3ef6" />
		<Microinstruction microRef="microinstruction.Increment18816031" />
		<Microinstruction microRef="microinstruction.TransferRtoR74636727" />
		<Microinstruction microRef="microinstruction.Decode466a7ae3" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="NAND" opcode="c" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Logical3074ce18" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="NOR" opcode="a" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Logical31915eab" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="XOR" opcode="d" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Logical38100403" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="NOT" opcode="b" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Logical582c9bc9" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="7001" format="OPCODE" >
		<Microinstruction microRef="microinstruction.SetCondBit295f7756" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="OR" opcode="9" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Logical2e821bc5" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="SUB" opcode="8" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Arithmetic39eb14ea" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="e020" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Increment341e3eb4" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="6" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Increment13f6f904" />
		<Microinstruction microRef="microinstruction.MemoryAccess69b2e039" />
		<Microinstruction microRef="microinstruction.Test1520dd15" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="e002" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Increment18816031" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="e004" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Increment18816031" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="e008" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Test1fdecfa2" />
		<Microinstruction microRef="microinstruction.Increment18816031" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e010" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Testa1dc072" />
		<Microinstruction microRef="microinstruction.Increment18816031" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="7040" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Shift31fb1a1" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7080" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Shift108cc91b" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="e100" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Logical3f8140df" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="e200" format="OPCODE" >
		<Microinstruction microRef="microinstruction.Logical34f61ac" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="e400" format="OPCODE" >
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="e800" format="OPCODE" >
		<Microinstruction microRef="microinstruction.CpusimSet6786568" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" format="OPCODE" >
		<Microinstruction microRef="microinstruction.IO20d24dea" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f001" format="OPCODE" >
		<Microinstruction microRef="microinstruction.IO30fcf4d3" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Logical464603da" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="1" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.Arithmetic16328d9" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="2" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess30c09819" />
		<Microinstruction microRef="microinstruction.TransferRtoR41d1507a" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="3" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess63e7f9c0" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="4" format="OP ADDRESS" >
		<Microinstruction microRef="microinstruction.TransferRtoRdf3b9a7" />
		<Microinstruction microRef="microinstruction.End2645008e" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAMb77349f" startingAddress="0" />

	<!--............. module window info ............-->
	<ModuleWindowsInfo>
	</ModuleWindowsInfo>

</Machine>
