<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="cpusim.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field47739202">
	</Field>
	<Field name="ADDRESS" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field76844e2d">
	</Field>
	<Field name="OPCODE" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field545fe241">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register463ddaf0" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register30ba31e6" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register235800b3" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register49ab6940" />
	<Register name="FGI" width="1" initialValue="0" readOnly="false" id="model.module.Register6169d0df" />
	<Register name="FGO" width="1" initialValue="0" readOnly="false" id="model.module.Register3de815" />
	<Register name="IEN" width="1" initialValue="1" readOnly="false" id="model.module.Register63032d39" />
	<Register name="INPR" width="8" initialValue="0" readOnly="true" id="model.module.Register71f0a970" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register5e3060b9" />
	<Register name="OUTR" width="8" initialValue="0" readOnly="false" id="model.module.Register4bb2cfc2" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register3ffd44ed" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register6215de03" />
	<Register name="TR" width="16" initialValue="0" readOnly="false" id="model.module.Register41a5d76d" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY-OUT" bit="0" register="model.module.Register49ab6940" halt="false" id="model.module.ConditionBit1c34cc44" />
	<ConditionBit name="HALT-BIT" bit="0" register="model.module.Register6215de03" halt="true" id="model.module.ConditionBit493b3903" />

	<!--............. rams ..........................-->
	<RAM name="RAM" length="4096" cellSize="16" id="model.module.RAM59203e1" />

	<!--............. set ...........................-->
	<Set name="AC&lt;- 0" register="model.module.Register463ddaf0" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet40eccd56" />
	<Set name="E&lt;-0" register="model.module.Register49ab6940" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet557443a1" />
	<Set name="IEN&lt;-0" register="model.module.Register63032d39" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet22f48434" />
	<Set name="IEN&lt;-1" register="model.module.Register63032d39" start="0" numBits="1" value="1" id="model.microinstruction.CpusimSeta7889a2" />
	<Set name="S&lt;0" register="model.module.Register6215de03" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet2cd863c6" />

	<!--............. test ..........................-->
	<Test name="IF AC IS NEGATIVE THEN PC&lt;-PC+1" register="model.module.Register463ddaf0" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test5b4654b7" />
	<Test name="IF AC IS POSITIVE THEN PC&lt;- PC+1" register="model.module.Register463ddaf0" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test5d95aecf" />
	<Test name="IF DR=0 THEN PC=PC+1" register="model.module.Register235800b3" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test13ee0946" />
	<Test name="IF(AC=0) THEN PC&lt;-PC+1" register="model.module.Register463ddaf0" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test7c479eae" />
	<Test name="IF(AC&gt;=0) THEN SKIP" register="model.module.Register463ddaf0" start="0" numBits="16" comparison="GE" value="0" omission="1" id="model.microinstruction.Test15cd9e7d" />
	<Test name="IF(E=0) THEN PC&lt;- PC+1" register="model.module.Register49ab6940" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test65dea9dd" />
	<Test name="IF(FGI=0) THEN PC= PC+1" register="model.module.Register6169d0df" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test6192819" />
	<Test name="IF(FGO=0) THEN PC=PC+1" register="model.module.Register3de815" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test46eb649a" />

	<!--............. increment .....................-->
	<Increment name="INC AC" register="model.module.Register463ddaf0" carryBit="model.module.ConditionBit1c34cc44" delta="1" id="model.microinstruction.Increment3fac344c" />
	<Increment name="INC AR" register="model.module.Register30ba31e6" delta="1" id="model.microinstruction.Increment2f2cf225" />
	<Increment name="INC DR" register="model.module.Register235800b3" delta="1" id="model.microinstruction.Increment603a5e39" />
	<Increment name="INC PC" register="model.module.Register3ffd44ed" delta="1" id="model.microinstruction.Increment7d683910" />

	<!--............. shift .........................-->
	<Shift name="ASHL" type="logical" source="model.module.Register463ddaf0" destination="model.module.Register463ddaf0" direction="left" distance="1" id="model.microinstruction.Shift59344ffb" />
	<Shift name="ASHR" type="logical" source="model.module.Register463ddaf0" destination="model.module.Register463ddaf0" direction="right" distance="1" id="model.microinstruction.Shift65a85d74" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;- AC AND DR" type="AND" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logical7d925770" />
	<Logical name="AC&lt;- AC NAND DR" type="NAND" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logical5af6f64b" />
	<Logical name="AC&lt;- AC NOR DR" type="NOR" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logical710971fd" />
	<Logical name="AC&lt;- AC NOT DR" type="NOT" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logical6367484f" />
	<Logical name="AC&lt;- AC OR DR" type="OR" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logicalc21ba84" />
	<Logical name="AC&lt;- AC XOR DR" type="XOR" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logical610851e5" />
	<Logical name="AC&lt;- AC'" type="NOT" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Logical5bb442a0" />
	<Logical name="E&lt;- E'" type="NOT" source1="model.module.Register49ab6940" source2="model.module.Register49ab6940" destination="model.module.Register49ab6940" id="model.microinstruction.Logical2c85ca9" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;- AC+DR" type="ADD" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Arithmetic33c33ee" />
	<Arithmetic name="AC&lt;- AC-DR" type="SUBTRACT" source1="model.module.Register463ddaf0" source2="model.module.Register235800b3" destination="model.module.Register463ddaf0" id="model.microinstruction.Arithmetic2098cd15" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(15)&lt;-TR(0)" source="model.module.Register41a5d76d" srcStartBit="0" dest="model.module.Register463ddaf0" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR59c02ae4" />
	<TransferRtoR name="AC&lt;- DR" source="model.module.Register235800b3" srcStartBit="0" dest="model.module.Register463ddaf0" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR19ad0861" />
	<TransferRtoR name="AC&lt;- TR(0)" source="model.module.Register41a5d76d" srcStartBit="0" dest="model.module.Register463ddaf0" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR7becfbf9" />
	<TransferRtoR name="AR&lt;- IR(0-11)" source="model.module.Register5e3060b9" srcStartBit="0" dest="model.module.Register30ba31e6" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR1dfa61f4" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register3ffd44ed" srcStartBit="0" dest="model.module.Register30ba31e6" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR45b5efa5" />
	<TransferRtoR name="E&lt;- AC(0)" source="model.module.Register463ddaf0" srcStartBit="0" dest="model.module.Register49ab6940" destStartBit="0" numBits="0" id="model.microinstruction.TransferRtoR34aa0972" />
	<TransferRtoR name="E&lt;- AC(15)" source="model.module.Register463ddaf0" srcStartBit="15" dest="model.module.Register49ab6940" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR28851f2d" />
	<TransferRtoR name="PC&lt;- AR" source="model.module.Register30ba31e6" srcStartBit="0" dest="model.module.Register3ffd44ed" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR663e3e08" />
	<TransferRtoR name="TR(0)&lt;- E" source="model.module.Register49ab6940" srcStartBit="0" dest="model.module.Register41a5d76d" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR681954c5" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR (12-14)" ir="model.module.Register5e3060b9" id="model.microinstruction.Decode68e5429c" />

	<!--............. set condition bit .............-->
	<SetCondBit name="S" bit="model.module.ConditionBit493b3903" value="1" id="model.microinstruction.SetCondBit7f3cfff6" />

	<!--............. io ............................-->
	<IO name="INPUT" direction="input" type="integer" buffer="model.module.Register463ddaf0" connection="[Console]" id="model.microinstruction.IO12a0c4f9" />
	<IO name="OUTPUT" direction="output" type="integer" buffer="model.module.Register463ddaf0" connection="[Console]" id="model.microinstruction.IO303d1514" />

	<!--............. memory access .................-->
	<MemoryAccess name="AC&lt;- M[AR]" direction="read" memory="model.module.RAM59203e1" data="model.module.Register463ddaf0" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess728e502d" />
	<MemoryAccess name="AR&lt;- M[AR]" direction="read" memory="model.module.RAM59203e1" data="model.module.Register30ba31e6" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess6ad5c2c5" />
	<MemoryAccess name="DR&lt;- M[AR]" direction="read" memory="model.module.RAM59203e1" data="model.module.Register235800b3" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess7ec6446a" />
	<MemoryAccess name="IR&lt;- M[AR]" direction="read" memory="model.module.RAM59203e1" data="model.module.Register5e3060b9" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess260b7b13" />
	<MemoryAccess name="M[AR]&lt;- AC" direction="write" memory="model.module.RAM59203e1" data="model.module.Register463ddaf0" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess268458c7" />
	<MemoryAccess name="M[AR]&lt;- DR" direction="write" memory="model.module.RAM59203e1" data="model.module.Register235800b3" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess62837538" />
	<MemoryAccess name="M[AR]&lt;-PC" direction="write" memory="model.module.RAM59203e1" data="model.module.Register3ffd44ed" address="model.module.Register30ba31e6" id="model.microinstruction.MemoryAccess2eaa9816" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End5384ad33" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR45b5efa5" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess260b7b13" />
		<Microinstruction microRef="model.microinstruction.Increment7d683910" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1dfa61f4" />
		<Microinstruction microRef="model.microinstruction.Decode68e5429c" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="BUN" opcode="3" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#b9bb87 #da95bb" assemblyColors="#b9bb87 #da95bb" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess268458c7" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="2" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#b0fabc #f484fe" assemblyColors="#b0fabc #f484fe" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR19ad0861" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="1" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#93c38c #fcb2d5" assemblyColors="#93c38c #fcb2d5" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Arithmetic33c33ee" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="0" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#d9ba82 #f2dd93" assemblyColors="#d9ba82 #f2dd93" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Logical7d925770" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="f001" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#adfbf0" assemblyColors="#adfbf0" >
		<Microinstruction microRef="model.microinstruction.IO12a0c4f9" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f400" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#82a8cf" assemblyColors="#82a8cf" >
		<Microinstruction microRef="model.microinstruction.IO303d1514" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="e800" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#a4e5b7" assemblyColors="#a4e5b7" >
		<Microinstruction microRef="model.microinstruction.CpusimSet40eccd56" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="e400" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b3a09d" assemblyColors="#b3a09d" >
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="e200" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#f3e08c" assemblyColors="#f3e08c" >
		<Microinstruction microRef="model.microinstruction.Logical5bb442a0" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="e100" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#eeb8cb" assemblyColors="#eeb8cb" >
		<Microinstruction microRef="model.microinstruction.Logical2c85ca9" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7080" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#94df97" assemblyColors="#94df97" >
		<Microinstruction microRef="model.microinstruction.Shift65a85d74" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7040" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#93cbf9" assemblyColors="#93cbf9" >
		<Microinstruction microRef="model.microinstruction.Shift59344ffb" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="e010" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#cf91c4" assemblyColors="#cf91c4" >
		<Microinstruction microRef="model.microinstruction.Test5d95aecf" />
		<Microinstruction microRef="model.microinstruction.Increment7d683910" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e008" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#f6d58e" assemblyColors="#f6d58e" >
		<Microinstruction microRef="model.microinstruction.Test5b4654b7" />
		<Microinstruction microRef="model.microinstruction.Increment7d683910" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="e004" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b8e68d" assemblyColors="#b8e68d" >
		<Microinstruction microRef="model.microinstruction.Increment7d683910" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="e002" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#88fad8" assemblyColors="#88fad8" >
		<Microinstruction microRef="model.microinstruction.Increment7d683910" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="6" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#a5d6d6 #eddfe6" assemblyColors="#a5d6d6 #eddfe6" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Increment603a5e39" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess62837538" />
		<Microinstruction microRef="model.microinstruction.Test13ee0946" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="e020" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#86d19b" assemblyColors="#86d19b" >
		<Microinstruction microRef="model.microinstruction.Increment3fac344c" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="8" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#b1e4d9 #c790e5" assemblyColors="#b1e4d9 #c790e5" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Arithmetic2098cd15" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="SUB" opcode="9" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#e8c6ef #a4c2c0" assemblyColors="#e8c6ef #a4c2c0" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Logicalc21ba84" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="OR" opcode="7001" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#e79ece" assemblyColors="#e79ece" >
		<Microinstruction microRef="model.microinstruction.SetCondBit7f3cfff6" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="b" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#c0c79d #c2bb8a" assemblyColors="#c0c79d #c2bb8a" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Logical6367484f" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="NOT" opcode="d" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#8d82ba #94a9f2" assemblyColors="#8d82ba #94a9f2" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Logical610851e5" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="XOR" opcode="a" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#80919c #c498ad" assemblyColors="#80919c #c498ad" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Logical710971fd" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<MachineInstruction name="NOR" opcode="c" instructionFormat="OP ADDRESS" assemblyFormat="OP ADDRESS" instructionColors="#8fb8e5 #89e5eb" assemblyColors="#8fb8e5 #89e5eb" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7ec6446a" />
		<Microinstruction microRef="model.microinstruction.Logical5af6f64b" />
		<Microinstruction microRef="model.microinstruction.End5384ad33" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM59203e1" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
